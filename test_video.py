"""
Script de prueba para la Etapa 3: Funcionalidad de Videos
Prueba todos los endpoints de detecci√≥n en videos implementados
"""

import requests
import json
import time
import os
import cv2
import numpy as np
from pathlib import Path
from loguru import logger


class VideoTester:
    """Clase para testing de la funcionalidad de detecci√≥n en videos"""

    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()

        # Configurar logging
        logger.remove()
        logger.add(
            lambda msg: print(msg, end=""),
            level="INFO",
            format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>\n"
        )

    def create_test_video(self, duration_seconds: int = 10, filename: str = "test_video.mp4") -> str:
        """
        Crea un video de prueba con placas simuladas

        Args:
            duration_seconds: Duraci√≥n del video en segundos
            filename: Nombre del archivo de video

        Returns:
            Ruta del video creado
        """
        try:
            logger.info(f"üé¨ Creando video de prueba: {duration_seconds}s")

            # Configuraci√≥n del video
            fps = 30
            width, height = 640, 480
            total_frames = duration_seconds * fps

            # Crear video writer
            fourcc = cv2.VideoWriter_fourcc(*'mp4v')
            out = cv2.VideoWriter(filename, fourcc, fps, (width, height))

            # Placas simuladas que aparecer√°n en diferentes momentos
            test_plates = [
                {"text": "ABC-123", "start_frame": 0, "end_frame": total_frames // 3, "color": (255, 255, 255)},
                {"text": "XYZ-789", "start_frame": total_frames // 3, "end_frame": 2 * total_frames // 3,
                 "color": (255, 255, 255)},
                {"text": "DEF-456", "start_frame": 2 * total_frames // 3, "end_frame": total_frames,
                 "color": (255, 255, 255)}
            ]

            for frame_num in range(total_frames):
                # Crear frame base (fondo azul)
                frame = np.zeros((height, width, 3), dtype=np.uint8)
                frame[:] = (100, 150, 200)  # Fondo azul claro

                # Determinar qu√© placa mostrar en este frame
                current_plate = None
                for plate in test_plates:
                    if plate["start_frame"] <= frame_num < plate["end_frame"]:
                        current_plate = plate
                        break

                if current_plate:
                    # Calcular posici√≥n de la placa (se mueve de izquierda a derecha)
                    plate_range = current_plate["end_frame"] - current_plate["start_frame"]
                    progress = (frame_num - current_plate["start_frame"]) / plate_range

                    # Posici√≥n horizontal de la placa
                    plate_x = int(50 + progress * (width - 250))
                    plate_y = height // 2 - 30

                    # Dibujar rect√°ngulo de la placa
                    cv2.rectangle(frame, (plate_x, plate_y), (plate_x + 200, plate_y + 60),
                                  current_plate["color"], -1)
                    cv2.rectangle(frame, (plate_x, plate_y), (plate_x + 200, plate_y + 60),
                                  (0, 0, 0), 2)

                    # Escribir texto de la placa
                    font = cv2.FONT_HERSHEY_SIMPLEX
                    font_scale = 1.0
                    thickness = 2

                    # Calcular posici√≥n centrada del texto
                    text_size = cv2.getTextSize(current_plate["text"], font, font_scale, thickness)[0]
                    text_x = plate_x + (200 - text_size[0]) // 2
                    text_y = plate_y + (60 + text_size[1]) // 2

                    cv2.putText(frame, current_plate["text"], (text_x, text_y),
                                font, font_scale, (0, 0, 0), thickness)

                # Agregar informaci√≥n del frame (opcional)
                cv2.putText(frame, f"Frame: {frame_num}", (10, 30),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)

                # Escribir frame al video
                out.write(frame)

                # Mostrar progreso cada 30 frames
                if frame_num % 30 == 0:
                    progress = (frame_num / total_frames) * 100
                    logger.info(f"   üìä Progreso creaci√≥n: {progress:.1f}%")

            # Finalizar video
            out.release()

            logger.success(f"‚úÖ Video de prueba creado: {filename}")
            return filename

        except Exception as e:
            logger.error(f"‚ùå Error creando video de prueba: {str(e)}")
            return ""

    def test_video_detection(self, video_path: str = None):
        """Prueba detecci√≥n completa en video"""
        logger.info("üé¨ Probando detecci√≥n en video...")

        # Crear video de prueba si no se proporciona uno
        if not video_path:
            video_path = self.create_test_video(15, "test_plate_video.mp4")
            if not video_path:
                logger.error("‚ùå No se puede probar sin video")
                return False

        if not os.path.exists(video_path):
            logger.error(f"‚ùå Archivo no encontrado: {video_path}")
            return False

        try:
            # Preparar archivos y datos
            files = {
                'file': ('test_video.mp4', open(video_path, 'rb'), 'video/mp4')
            }

            data = {
                'confidence_threshold': 0.3,  # M√°s permisivo para videos de prueba
                'iou_threshold': 0.4,
                'frame_skip': 3,
                'max_duration': 300,
                'save_results': True,
                'save_best_frames': True,
                'create_annotated_video': False,
                'min_detection_frames': 2
            }

            logger.info("üì§ Enviando video para detecci√≥n...")
            start_time = time.time()

            response = self.session.post(
                f"{self.base_url}/api/v1/video/detect",
                files=files,
                data=data,
                timeout=300  # 5 minutos timeout
            )

            processing_time = time.time() - start_time

            # Cerrar archivo
            files['file'][1].close()

            if response.status_code == 200:
                result = response.json()
                logger.success(f"‚úÖ Detecci√≥n en video completada en {processing_time:.3f}s")

                # Analizar resultados
                data = result["data"]
                logger.info(f"   üéØ √âxito: {'‚úÖ' if data['success'] else '‚ùå'}")
                logger.info(f"   üìä Placas √∫nicas encontradas: {len(data['unique_plates'])}")
                logger.info(f"   ‚è±Ô∏è Tiempo procesamiento: {data['processing_time']}s")

                # Informaci√≥n del video
                video_info = data.get("video_info", {})
                logger.info(f"   üìπ Video: {video_info.get('duration', 0):.1f}s, "
                            f"{video_info.get('total_frames', 0)} frames")

                # Resumen de procesamiento
                summary = data.get("processing_summary", {})
                logger.info(f"   üìä Frames procesados: {summary.get('frames_processed', 0)}")
                logger.info(f"   üéØ Frames con detecciones: {summary.get('frames_with_detections', 0)}")
                logger.info(f"   üîç Total detecciones: {summary.get('total_detections', 0)}")

                if data["unique_plates"]:
                    logger.info("   üèÜ Placas detectadas:")
                    for i, plate in enumerate(data["unique_plates"][:5]):  # Mostrar m√°ximo 5
                        logger.info(f"      {i + 1}. '{plate['plate_text']}' - "
                                    f"Confianza: {plate['best_confidence']:.3f} - "
                                    f"Detecciones: {plate['detection_count']} - "
                                    f"V√°lida: {'‚úÖ' if plate['is_valid_format'] else '‚ùå'}")

                    # Informaci√≥n de la mejor placa
                    best_plate = data["best_plate"]
                    logger.info(f"   ü•á Mejor placa: '{best_plate['plate_text']}'")
                    logger.info(f"      üìä Confianza: {best_plate['best_confidence']:.3f}")
                    logger.info(f"      üîÑ Detecciones: {best_plate['detection_count']}")
                    logger.info(f"      üé¨ Frame inicial: {best_plate['first_seen_frame']}")
                    logger.info(f"      üé¨ Frame final: {best_plate['last_seen_frame']}")
                    logger.info(f"      ‚úÖ Formato v√°lido: {'S√≠' if best_plate['is_valid_format'] else 'No'}")
                else:
                    logger.info("   üì≠ No se detectaron placas")

                # URLs de resultados
                if data.get("result_urls"):
                    logger.info("   üîó URLs de resultados:")
                    for key, url in data["result_urls"].items():
                        logger.info(f"      {key}: {url}")

                return True
            else:
                logger.error(f"‚ùå Detecci√≥n en video fall√≥: {response.status_code}")
                logger.error(f"   Detalle: {response.text}")
                return False

        except Exception as e:
            logger.error(f"‚ùå Error en detecci√≥n de video: {str(e)}")
            return False
        finally:
            # Limpiar video de prueba creado
            if video_path == "test_plate_video.mp4":
                try:
                    os.remove("test_plate_video.mp4")
                except:
                    pass

    def test_quick_video_detection(self, video_path: str = None):
        """Prueba detecci√≥n r√°pida en video"""
        logger.info("‚ö° Probando detecci√≥n r√°pida en video...")

        # Crear video de prueba m√°s corto
        if not video_path:
            video_path = self.create_test_video(5, "test_quick_video.mp4")
            if not video_path:
                logger.error("‚ùå No se puede probar sin video")
                return False

        if not os.path.exists(video_path):
            logger.error(f"‚ùå Archivo no encontrado: {video_path}")
            return False

        try:
            files = {
                'file': ('test_quick_video.mp4', open(video_path, 'rb'), 'video/mp4')
            }

            data = {
                'confidence_threshold': 0.4,
                'frame_skip': 5,  # M√°s agresivo para velocidad
                'max_duration': 60
            }

            start_time = time.time()

            response = self.session.post(
                f"{self.base_url}/api/v1/video/detect/quick",
                files=files,
                data=data,
                timeout=120  # 2 minutos timeout
            )

            processing_time = time.time() - start_time

            # Cerrar archivo
            files['file'][1].close()

            if response.status_code == 200:
                result = response.json()
                logger.success(f"‚úÖ Detecci√≥n r√°pida en video completada en {processing_time:.3f}s")

                logger.info(f"   üéØ √âxito: {'‚úÖ' if result['success'] else '‚ùå'}")
                logger.info(f"   üìä Placas √∫nicas: {result['unique_plates_count']}")

                if result['success'] and result['unique_plates_count'] > 0:
                    logger.info(f"   üìã Mejor placa: '{result['best_plate_text']}'")
                    logger.info(f"   üéØ Confianza: {result['best_confidence']:.3f}")
                    logger.info(f"   üîÑ Detecciones: {result['detection_count']}")
                    logger.info(f"   ‚úÖ Formato v√°lido: {'S√≠' if result['is_valid_format'] else 'No'}")
                    logger.info(f"   üìä Frames procesados: {result['frames_processed']}")
                else:
                    logger.info("   üì≠ No se detectaron placas")

                logger.info(f"   ‚è±Ô∏è Tiempo: {result['processing_time']}s")

                return True
            else:
                logger.error(f"‚ùå Detecci√≥n r√°pida en video fall√≥: {response.status_code}")
                logger.error(f"   Detalle: {response.text}")
                return False

        except Exception as e:
            logger.error(f"‚ùå Error en detecci√≥n r√°pida de video: {str(e)}")
            return False
        finally:
            # Limpiar video de prueba creado
            if video_path == "test_quick_video.mp4":
                try:
                    os.remove("test_quick_video.mp4")
                except:
                    pass

    def test_video_stats(self):
        """Prueba endpoint de estad√≠sticas de video"""
        logger.info("üìä Probando estad√≠sticas de video...")

        try:
            response = self.session.get(f"{self.base_url}/api/v1/video/stats")

            if response.status_code == 200:
                data = response.json()["data"]
                logger.success("‚úÖ Estad√≠sticas de video OK")

                config = data.get("configuration", {})
                capabilities = data.get("processing_capabilities", {})
                performance = data.get("performance", {})

                logger.info(f"   ‚è±Ô∏è Duraci√≥n m√°xima: {config.get('max_video_duration', 0)}s")
                logger.info(f"   üìπ Formatos soportados: {len(config.get('supported_formats', []))}")
                logger.info(f"   üîÑ Frame skip por defecto: {config.get('default_frame_skip', 0)}")
                logger.info(f"   üöÄ GPU disponible: {'‚úÖ' if capabilities.get('gpu_acceleration') else '‚ùå'}")
                logger.info(f"   üîß Procesamiento paralelo: {'‚úÖ' if capabilities.get('parallel_processing') else '‚ùå'}")
                logger.info(f"   ‚ö° Velocidad promedio: {performance.get('avg_processing_speed', 'N/A')}")

                return True
            else:
                logger.error(f"‚ùå Estad√≠sticas de video fallaron: {response.status_code}")
                return False

        except Exception as e:
            logger.error(f"‚ùå Error en estad√≠sticas de video: {str(e)}")
            return False

    def test_video_validate_params(self):
        """Prueba validaci√≥n de par√°metros de video"""
        logger.info("‚úÖ Probando validaci√≥n de par√°metros de video...")

        # Par√°metros v√°lidos para video
        valid_params = {
            "confidence_threshold": 0.4,
            "iou_threshold": 0.4,
            "frame_skip": 3,
            "max_duration": 180,
            "min_detection_frames": 2
        }

        try:
            response = self.session.post(
                f"{self.base_url}/api/v1/video/validate-params",
                data=valid_params
            )

            if response.status_code == 200:
                data = response.json()
                if data["is_valid"]:
                    logger.success("‚úÖ Validaci√≥n de par√°metros de video OK")
                    if data["warnings"]:
                        logger.info(f"   ‚ö†Ô∏è Advertencias: {data['warnings']}")
                    if data["recommendations"]:
                        logger.info(f"   üí° Recomendaciones: {data['recommendations']}")
                    return True
                else:
                    logger.error(f"‚ùå Par√°metros de video inv√°lidos: {data['errors']}")
                    return False
            else:
                logger.error(f"‚ùå Validaci√≥n de video fall√≥: {response.status_code}")
                return False

        except Exception as e:
            logger.error(f"‚ùå Error en validaci√≥n de video: {str(e)}")
            return False

    def test_video_test_pipeline(self):
        """Prueba el endpoint de test pipeline para videos"""
        logger.info("üß™ Probando test pipeline de video...")

        # Crear video espec√≠fico para testing
        video_path = self.create_test_video(8, "test_pipeline_video.mp4")
        if not video_path:
            logger.error("‚ùå No se puede probar sin video")
            return False

        try:
            files = {
                'file': ('test_pipeline_video.mp4', open(video_path, 'rb'), 'video/mp4')
            }

            data = {
                'debug': True
            }

            start_time = time.time()

            response = self.session.post(
                f"{self.base_url}/api/v1/video/test-pipeline",
                files=files,
                data=data,
                timeout=180
            )

            processing_time = time.time() - start_time

            # Cerrar archivo
            files['file'][1].close()

            if response.status_code == 200:
                result = response.json()
                logger.success(f"‚úÖ Test pipeline de video completado en {processing_time:.3f}s")

                logger.info(f"   üéØ √âxito: {'‚úÖ' if result['success'] else '‚ùå'}")

                # An√°lisis de video
                video_analysis = result.get("video_analysis", {})
                logger.info(f"   üìä Placas √∫nicas encontradas: {video_analysis.get('unique_plates_found', 0)}")
                logger.info(f"   üèÜ Mejor placa: {video_analysis.get('best_plate', 'N/A')}")

                # Informaci√≥n de procesamiento
                processing_summary = result.get("processing_summary", {})
                logger.info(f"   üé¨ Frames procesados: {processing_summary.get('frames_processed', 0)}")
                logger.info(f"   üéØ Frames con detecciones: {processing_summary.get('frames_with_detections', 0)}")

                # Informaci√≥n de video
                video_info = result.get("video_info", {})
                logger.info(f"   üìπ Duraci√≥n: {video_info.get('duration', 0):.1f}s")
                logger.info(f"   üìä Total frames: {video_info.get('total_frames', 0)}")

                # Debug info si est√° disponible
                if result.get("debug_info"):
                    debug = result["debug_info"]
                    tracking = debug.get("tracking_details", {})
                    logger.info("   üîç Info de debug:")
                    logger.info(f"      Frame skip usado: {debug.get('frame_skip_used', 'N/A')}")
                    logger.info(f"      Umbral confianza: {debug.get('confidence_threshold', 'N/A')}")
                    logger.info(f"      Total detecciones: {tracking.get('total_detections', 0)}")

                return True
            else:
                logger.error(f"‚ùå Test pipeline de video fall√≥: {response.status_code}")
                logger.error(f"   Detalle: {response.text}")
                return False

        except Exception as e:
            logger.error(f"‚ùå Error en test pipeline de video: {str(e)}")
            return False
        finally:
            # Limpiar video de prueba
            try:
                os.remove("test_pipeline_video.mp4")
            except:
                pass

    def run_all_video_tests(self, video_path: str = None):
        """Ejecuta todos los tests espec√≠ficos de video"""
        logger.info("üß™ INICIANDO TESTS DE LA ETAPA 3 - VIDEOS")
        logger.info("=" * 60)

        tests = [
            ("Estad√≠sticas de Video", self.test_video_stats),
            ("Validaci√≥n de Par√°metros de Video", self.test_video_validate_params),
            ("Detecci√≥n en Video", lambda: self.test_video_detection(video_path)),
            ("Detecci√≥n R√°pida en Video", lambda: self.test_quick_video_detection(video_path)),
            ("Test Pipeline de Video", self.test_video_test_pipeline)
        ]

        results = []

        for test_name, test_func in tests:
            logger.info("-" * 40)
            start_time = time.time()

            try:
                success = test_func()
                duration = time.time() - start_time

                results.append({
                    "test": test_name,
                    "success": success,
                    "duration": round(duration, 3)
                })

                if success:
                    logger.success(f"‚úÖ {test_name} - OK ({duration:.3f}s)")
                else:
                    logger.error(f"‚ùå {test_name} - FALL√ì ({duration:.3f}s)")

            except Exception as e:
                duration = time.time() - start_time
                logger.error(f"‚ùå {test_name} - ERROR: {str(e)}")
                results.append({
                    "test": test_name,
                    "success": False,
                    "duration": round(duration, 3),
                    "error": str(e)
                })

        # Resumen final
        logger.info("=" * 60)
        logger.info("üìä RESUMEN DE TESTS DE VIDEO")

        passed = sum(1 for r in results if r["success"])
        total = len(results)
        total_time = sum(r["duration"] for r in results)

        logger.info(f"‚úÖ Tests exitosos: {passed}/{total}")
        logger.info(f"‚ùå Tests fallidos: {total - passed}/{total}")
        logger.info(f"‚è±Ô∏è Tiempo total: {total_time:.3f}s")

        if passed == total:
            logger.success("üéâ ¬°TODOS LOS TESTS DE VIDEO PASARON!")
            logger.success("üöÄ ETAPA 3 - PROCESAMIENTO DE VIDEOS COMPLETAMENTE FUNCIONAL")
        else:
            logger.warning("‚ö†Ô∏è Algunos tests de video fallaron. Revisar errores arriba.")

        return results


def main():
    """Funci√≥n principal"""
    import argparse

    parser = argparse.ArgumentParser(description="Test de la Etapa 3 - Funcionalidad de Videos")
    parser.add_argument("--url", default="http://localhost:8000", help="URL base de la API")
    parser.add_argument("--video", help="Ruta de video espec√≠fica para probar")
    parser.add_argument("--test", choices=["stats", "detection", "quick", "pipeline", "all"],
                        default="all", help="Tipo de test a ejecutar")

    args = parser.parse_args()

    tester = VideoTester(args.url)

    logger.info(f"üöÄ Probando API de videos en: {args.url}")

    if args.test == "stats":
        tester.test_video_stats()
    elif args.test == "detection":
        tester.test_video_detection(args.video)
    elif args.test == "quick":
        tester.test_quick_video_detection(args.video)
    elif args.test == "pipeline":
        tester.test_video_test_pipeline()
    elif args.test == "all":
        tester.run_all_video_tests(args.video)


if __name__ == "__main__":
    main()