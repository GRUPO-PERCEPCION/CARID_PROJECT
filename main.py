from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from contextlib import asynccontextmanager
import uvicorn
from loguru import logger
import sys
import os

from starlette.responses import JSONResponse
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.requests import Request
from starlette.responses import JSONResponse

# Configurar logging
from config.settings import settings

# Configurar loguru
logger.remove()  # Remover handler por defecto
logger.add(
    sys.stdout,
    level=settings.log_level,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>"
)

# Agregar logging a archivo si est√° configurado
if settings.log_file:
    os.makedirs(os.path.dirname(settings.log_file), exist_ok=True)
    logger.add(
        settings.log_file,
        level=settings.log_level,
        rotation="10 MB",
        retention="7 days",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}"
    )

# Importar despu√©s de configurar logging
from models.model_manager import model_manager
from api.routes import health, detection
from api.routes.video import video_router


# üîß MIDDLEWARE PERSONALIZADO PARA ARCHIVOS GRANDES
class LargeFileMiddleware(BaseHTTPMiddleware):
    """Middleware para manejar archivos grandes"""

    async def dispatch(self, request: Request, call_next):
        # Verificar tama√±o del contenido
        content_length = request.headers.get("content-length")

        if content_length:
            content_length = int(content_length)
            max_size = settings.max_file_size * 1024 * 1024  # Convertir MB a bytes

            if content_length > max_size:
                return JSONResponse(
                    status_code=413,
                    content={
                        "success": False,
                        "error": {
                            "type": "PayloadTooLarge",
                            "message": f"Archivo muy grande. Tama√±o m√°ximo: {settings.max_file_size}MB, recibido: {content_length / (1024 * 1024):.1f}MB",
                            "max_size_mb": settings.max_file_size,
                            "received_size_mb": round(content_length / (1024 * 1024), 1)
                        }
                    }
                )

        response = await call_next(request)
        return response


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gesti√≥n del ciclo de vida de la aplicaci√≥n"""

    # Startup
    logger.info("üöÄ Iniciando CARID ALPR API...")

    try:
        # Crear directorios necesarios
        logger.info("üìÅ Creando directorios...")
        settings.create_directories()

        # Validar archivos de modelos
        logger.info("üîç Validando archivos de modelos...")
        validation = settings.validate_model_files()

        if not validation["models_dir_exists"]:
            logger.error("‚ùå Directorio de modelos no existe: ./models_trained")
            raise HTTPException(
                status_code=500,
                detail="Directorio de modelos no encontrado"
            )

        if not validation["plate_model_exists"]:
            logger.error(f"‚ùå Modelo de placas no encontrado: {settings.plate_model_path}")
            raise HTTPException(
                status_code=500,
                detail="Modelo de detecci√≥n de placas no encontrado"
            )

        if not validation["char_model_exists"]:
            logger.error(f"‚ùå Modelo de caracteres no encontrado: {settings.char_model_path}")
            raise HTTPException(
                status_code=500,
                detail="Modelo de reconocimiento de caracteres no encontrado"
            )

        # Cargar modelos
        logger.info("ü§ñ Cargando modelos YOLOv8...")
        if not model_manager.load_models():
            logger.error("‚ùå Error cargando modelos")
            raise HTTPException(
                status_code=500,
                detail="Error al cargar los modelos YOLOv8"
            )

        # Realizar warmup opcional
        logger.info("üî• Realizando warmup de modelos...")
        model_manager.warmup_models()

        logger.success("‚úÖ CARID ALPR API iniciada exitosamente")
        logger.info(f"üåê API disponible en: http://{settings.host}:{settings.port}")
        logger.info(f"üìö Documentaci√≥n disponible en: http://{settings.host}:{settings.port}/docs")
        logger.info(f"üìÇ Tama√±o m√°ximo de archivos: {settings.max_file_size}MB")  # ‚úÖ NUEVO LOG

    except Exception as e:
        logger.error(f"‚ùå Error durante startup: {str(e)}")
        raise

    yield

    # Shutdown
    logger.info("üõë Cerrando CARID ALPR API...")

    # Limpiar archivos temporales en shutdown
    try:
        from services.file_service import file_service
        file_service.cleanup_old_files(0)
        logger.info("üóëÔ∏è Archivos temporales limpiados")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Error limpiando archivos temporales: {str(e)}")

    logger.info("‚úÖ API cerrada exitosamente")


# Crear aplicaci√≥n FastAPI
app = FastAPI(
    title="CARID - Sistema ALPR",
    description="""
    ## üöó CARID - Sistema de Reconocimiento Autom√°tico de Placas Vehiculares

    Sistema avanzado de detecci√≥n y reconocimiento de placas vehiculares usando YOLOv8.

    ### üéØ Caracter√≠sticas Principales:
    - **Detecci√≥n precisa** de placas vehiculares con YOLOv8
    - **Reconocimiento de caracteres** con alta precisi√≥n
    - **Procesamiento de videos** con tracking inteligente avanzado
    - **Validaci√≥n de formato** para placas peruanas
    - **Procesamiento optimizado** con GPU CUDA
    - **API REST completa** y documentada
    - **‚úÖ Soporte para archivos hasta 150MB**

    ### üîß Tecnolog√≠as:
    - **YOLOv8** para detecci√≥n y reconocimiento
    - **PyTorch** con soporte CUDA 11.8
    - **FastAPI** para la API REST
    - **OpenCV** para procesamiento de im√°genes y videos

    ### üìã Endpoints Principales:
    - `POST /api/v1/detect/image` - Detecci√≥n completa en im√°genes
    - `POST /api/v1/detect/image/quick` - Detecci√≥n r√°pida en im√°genes
    - `POST /api/v1/video/detect` - **MEJORADO:** Detecci√≥n en videos con tracking avanzado
    - `POST /api/v1/video/detect/quick` - **MEJORADO:** Detecci√≥n r√°pida en videos
    - `GET /api/v1/health` - Health checks
    - `GET /docs` - Esta documentaci√≥n

    ### üöÄ Etapa Actual: 3+ - Tracking Avanzado de Videos
    ‚úÖ Detecci√≥n y reconocimiento en im√°genes  
    ‚úÖ Validaci√≥n de formatos peruanos  
    ‚úÖ Procesamiento de videos frame por frame  
    ‚úÖ **NUEVO:** Tracking inteligente con doble confianza  
    ‚úÖ **NUEVO:** Sistema anti-duplicaci√≥n avanzado  
    ‚úÖ **NUEVO:** Selecci√≥n de mejores detecciones por estabilidad
    ‚úÖ **NUEVO:** Soporte para archivos hasta 150MB

    ### üìä Mejoras en Tracking:
    - **Doble Confianza**: Maneja independientemente la confianza del detector de placas y del reconocedor de caracteres
    - **Tracking Estable**: Requiere m√∫ltiples detecciones consistentes antes de confirmar una placa
    - **Anti-Duplicaci√≥n**: Evita reconocer la misma placa m√∫ltiples veces en el mismo veh√≠culo
    - **Calidad Temporal**: Eval√∫a la estabilidad de las detecciones a lo largo del tiempo
    - **Archivos Grandes**: Procesa videos de hasta 150MB y 10 minutos de duraci√≥n
    """,
    version=settings.app_version,
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# üîß CONFIGURAR MIDDLEWARES PARA ARCHIVOS GRANDES

# 1. Middleware personalizado para archivos grandes
app.add_middleware(LargeFileMiddleware)

# 2. CORS con configuraci√≥n extendida
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En producci√≥n, especificar dominios exactos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    max_age=3600,  # Cache preflight por 1 hora
)

# 3. Trusted Host (opcional para producci√≥n)
# app.add_middleware(TrustedHostMiddleware, allowed_hosts=["localhost", "127.0.0.1"])

# Montar archivos est√°ticos
try:
    app.mount("/static", StaticFiles(directory=settings.static_dir), name="static")
    logger.info(f"üìÅ Archivos est√°ticos montados en: /static -> {settings.static_dir}")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è No se pudieron montar archivos est√°ticos: {str(e)}")

# Importar despu√©s de configurar logging
from models.model_manager import model_manager
from api.routes import health, detection
from api.routes.video import video_router

# Incluir rutas
app.include_router(health.router)
app.include_router(detection.router)
app.include_router(video_router)

logger.info("üõ£Ô∏è Rutas registradas:")
logger.info("   üìä Health: /api/v1/health/*")
logger.info("   üîç Detection: /api/v1/detect/*")
logger.info("   üé¨ Video: /api/v1/video/*")


# Endpoint ra√≠z actualizado
@app.get("/", tags=["Root"])
async def root():
    """Endpoint ra√≠z de la API con informaci√≥n completa"""

    # Obtener estado de los modelos
    try:
        models_status = model_manager.get_model_info() if model_manager.is_loaded else {"models_loaded": False}
    except:
        models_status = {"models_loaded": False}

    return {
        "message": "üöó CARID - Sistema ALPR",
        "version": settings.app_version,
        "status": "running",
        "etapa_actual": "3+ - Tracking Avanzado con Doble Confianza",
        "funcionalidades": {
            "deteccion_placas_imagenes": "‚úÖ Disponible",
            "reconocimiento_caracteres": "‚úÖ Disponible",
            "validacion_formato": "‚úÖ Disponible",
            "procesamiento_videos": "‚úÖ Disponible",
            "tracking_avanzado": "‚úÖ **NUEVO** Doble confianza + estabilidad",
            "anti_duplicacion": "‚úÖ **MEJORADO** Sistema inteligente",
            "archivos_grandes": "‚úÖ **NUEVO** Hasta 150MB",
            "streaming_tiempo_real": "‚è≥ Pr√≥ximamente"
        },
        "modelos": {
            "cargados": models_status.get("models_loaded", False),
            "dispositivo": models_status.get("device", "unknown"),
            "detector_placas": models_status.get("plate_detector_loaded", False),
            "reconocedor_caracteres": models_status.get("char_recognizer_loaded", False)
        },
        "endpoints": {
            "deteccion_imagen": "/api/v1/detect/image",
            "deteccion_rapida": "/api/v1/detect/image/quick",
            "deteccion_video": "/api/v1/video/detect",
            "deteccion_video_rapida": "/api/v1/video/detect/quick",
            "estadisticas_video": "/api/v1/video/stats",
            "health_check": "/api/v1/health",
            "documentacion": "/docs",
            "estadisticas": "/api/v1/detect/stats"
        },
        "configuracion": {
            "max_file_size_mb": settings.max_file_size,  # ‚úÖ ACTUALIZADO A 150MB
            "formatos_imagenes": ["jpg", "jpeg", "png"],
            "formatos_videos": ["mp4", "avi", "mov", "mkv", "webm"],
            "max_video_duration": settings.max_video_duration,  # ‚úÖ 10 minutos
            "cuda_disponible": models_status.get("cuda_available", False)
        },
        "novedades_tracking_avanzado": {
            "doble_confianza": "Maneja independientemente detector y reconocedor",
            "estabilidad_temporal": "Requiere m√∫ltiples detecciones consistentes",
            "anti_duplicacion_inteligente": "Evita re-detectar la misma placa",
            "calidad_tracking": "Eval√∫a excellent/good/fair/poor",
            "archivos_grandes": "Hasta 150MB y 10 minutos",
            "pesos_configurables": "Detector 40% + Reconocedor 60%",
            "iou_tracking": "Seguimiento espacial mejorado",
            "limpieza_automatica": "Trackers inactivos se archivan autom√°ticamente"
        }
    }


# Endpoint de informaci√≥n del sistema (sin cambios)
@app.get("/system", tags=["System"])
async def system_info():
    """Informaci√≥n detallada del sistema"""
    try:
        from api.dependencies import get_system_info
        return get_system_info()
    except Exception as e:
        logger.error(f"‚ùå Error obteniendo info del sistema: {str(e)}")
        return {"error": "No se pudo obtener informaci√≥n del sistema"}


# Manejadores de errores mejorados
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    logger.error(f"‚ùå Error global en {request.url}: {str(exc)}")

    # Informaci√≥n adicional en modo debug
    error_detail = str(exc) if settings.debug else "Error interno del servidor"

    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "error": {
                "type": "InternalServerError",
                "message": "Error interno del servidor",
                "detail": error_detail
            },
            "endpoint": str(request.url.path),
            "method": request.method,
            "timestamp": str(__import__('datetime').datetime.utcnow().isoformat()),
            "help": "Contacte al administrador si el problema persiste"
        }
    )


@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc: HTTPException):
    logger.warning(f"‚ö†Ô∏è Error HTTP {exc.status_code} en {request.url}: {exc.detail}")

    return JSONResponse(
        status_code=exc.status_code,
        content={
            "success": False,
            "error": {
                "type": "HTTPException",
                "message": exc.detail,
                "status_code": exc.status_code
            },
            "endpoint": str(request.url.path),
            "method": request.method,
            "timestamp": str(__import__('datetime').datetime.utcnow().isoformat())
        }
    )


if __name__ == "__main__":
    # Mensaje de inicio actualizado
    logger.info("üöó CARID ALPR - Etapa 3+: Tracking Avanzado con Doble Confianza")
    logger.info("=" * 70)
    logger.info("üéØ Funcionalidades disponibles:")
    logger.info("   ‚úÖ Detecci√≥n de placas en im√°genes")
    logger.info("   ‚úÖ Reconocimiento de caracteres")
    logger.info("   ‚úÖ Validaci√≥n de formatos peruanos")
    logger.info("   ‚úÖ Procesamiento de videos")
    logger.info("   ‚úÖ Tracking inteligente con doble confianza")
    logger.info("   ‚úÖ Sistema anti-duplicaci√≥n avanzado")
    logger.info("   ‚úÖ Evaluaci√≥n de estabilidad temporal")
    logger.info("   ‚úÖ Soporte para archivos grandes (150MB)")
    logger.info("   ‚úÖ API REST completa")
    logger.info("   ‚úÖ Documentaci√≥n interactiva")
    logger.info("=" * 70)
    logger.info("üé¨ Capacidades de video mejoradas:")
    logger.info("   üìπ MP4, AVI, MOV, MKV, WebM hasta 150MB")
    logger.info("   ‚è±Ô∏è Duraci√≥n m√°xima: 10 minutos")
    logger.info("   üéØ Doble confianza: Detector + Reconocedor")
    logger.info("   üîÑ Tracking estable con m√∫ltiples validaciones")
    logger.info("   üöÄ Procesamiento optimizado y paralelo")
    logger.info("=" * 70)

    # Ejecutar servidor con configuraci√≥n para archivos grandes
    logger.info("üöÄ Iniciando servidor uvicorn con soporte para archivos grandes...")

    uvicorn.run(
        "main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug,
        log_level=settings.log_level.lower(),
        access_log=True,
        # üîß CONFIGURACIONES PARA ARCHIVOS GRANDES
        timeout_keep_alive=30,  # Mantener conexiones por m√°s tiempo
        limit_max_requests=1000,  # M√°ximo requests por worker
        backlog=2048  # Backlog de conexiones
    )