from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from contextlib import asynccontextmanager
import uvicorn
from loguru import logger
import sys
import os

from starlette.responses import JSONResponse
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.requests import Request
from starlette.responses import JSONResponse

# Configurar logging
from config.settings import settings

# Configurar loguru
logger.remove()  # Remover handler por defecto
logger.add(
    sys.stdout,
    level=settings.log_level,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>"
)

# Agregar logging a archivo si est√° configurado
if settings.log_file:
    os.makedirs(os.path.dirname(settings.log_file), exist_ok=True)
    logger.add(
        settings.log_file,
        level=settings.log_level,
        rotation="10 MB",
        retention="7 days",
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}"
    )

# Importar despu√©s de configurar logging
from models.model_manager import model_manager
from api.routes import health, detection
from api.routes.video import video_router
from api.routes.streaming import streaming_router


# üîß MIDDLEWARE PERSONALIZADO PARA ARCHIVOS GRANDES
class LargeFileMiddleware(BaseHTTPMiddleware):
    """Middleware para manejar archivos grandes"""

    async def dispatch(self, request: Request, call_next):
        # Verificar tama√±o del contenido
        content_length = request.headers.get("content-length")

        if content_length:
            content_length = int(content_length)
            max_size = settings.max_file_size * 1024 * 1024  # Convertir MB a bytes

            if content_length > max_size:
                return JSONResponse(
                    status_code=413,
                    content={
                        "success": False,
                        "error": {
                            "type": "PayloadTooLarge",
                            "message": f"Archivo muy grande. Tama√±o m√°ximo: {settings.max_file_size}MB, recibido: {content_length / (1024 * 1024):.1f}MB",
                            "max_size_mb": settings.max_file_size,
                            "received_size_mb": round(content_length / (1024 * 1024), 1)
                        }
                    }
                )

        response = await call_next(request)
        return response


# üåê MIDDLEWARE PARA WEBSOCKET Y STREAMING
class StreamingMiddleware(BaseHTTPMiddleware):
    """Middleware espec√≠fico para optimizar streaming"""

    async def dispatch(self, request: Request, call_next):
        # Optimizaciones para rutas de streaming
        if request.url.path.startswith("/api/v1/streaming"):
            # Headers espec√≠ficos para streaming
            request.headers.__dict__.setdefault("_list", [])

            # Configurar timeout extendido para streaming
            if "upload" in request.url.path or "start-session" in request.url.path:
                # Requests de upload pueden tardar m√°s
                pass

        response = await call_next(request)

        # Headers espec√≠ficos para streaming
        if request.url.path.startswith("/api/v1/streaming"):
            response.headers["X-Streaming-Service"] = "CARID-ALPR"
            response.headers["X-Service-Version"] = settings.app_version

        return response


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gesti√≥n del ciclo de vida de la aplicaci√≥n con streaming"""

    # Startup
    logger.info("üöÄ Iniciando CARID ALPR API con Streaming...")

    try:
        # Crear directorios necesarios (incluyendo streaming)
        logger.info("üìÅ Creando directorios...")
        settings.create_directories()

        # Validar archivos de modelos
        logger.info("üîç Validando archivos de modelos...")
        validation = settings.validate_model_files()

        if not validation["models_dir_exists"]:
            logger.error("‚ùå Directorio de modelos no existe: ./models_trained")
            raise HTTPException(
                status_code=500,
                detail="Directorio de modelos no encontrado"
            )

        if not validation["plate_model_exists"]:
            logger.error(f"‚ùå Modelo de placas no encontrado: {settings.plate_model_path}")
            raise HTTPException(
                status_code=500,
                detail="Modelo de detecci√≥n de placas no encontrado"
            )

        if not validation["char_model_exists"]:
            logger.error(f"‚ùå Modelo de caracteres no encontrado: {settings.char_model_path}")
            raise HTTPException(
                status_code=500,
                detail="Modelo de reconocimiento de caracteres no encontrado"
            )

        # Cargar modelos
        logger.info("ü§ñ Cargando modelos YOLOv8...")
        if not model_manager.load_models():
            logger.error("‚ùå Error cargando modelos")
            raise HTTPException(
                status_code=500,
                detail="Error al cargar los modelos YOLOv8"
            )

        # Realizar warmup opcional
        logger.info("üî• Realizando warmup de modelos...")
        model_manager.warmup_models()

        # ‚úÖ VALIDAR CONFIGURACI√ìN DE STREAMING
        logger.info("üåê Validando configuraci√≥n de streaming...")
        streaming_validation = settings.validate_streaming_settings()

        if streaming_validation["all_valid"]:
            logger.success("‚úÖ Configuraci√≥n de streaming v√°lida")
        else:
            logger.warning("‚ö†Ô∏è Algunas configuraciones de streaming pueden no ser √≥ptimas")
            for key, valid in streaming_validation.items():
                if not valid and key != "all_valid":
                    logger.warning(f"   ‚ö†Ô∏è {key}: configuraci√≥n sub√≥ptima")

        # ‚úÖ INICIALIZAR SERVICIOS DE STREAMING
        logger.info("üé¨ Inicializando servicios de streaming...")

        # Importar e inicializar servicios de streaming
        from services.streaming_service import streaming_service
        from api.websocket_manager import connection_manager

        logger.success("‚úÖ Servicios de streaming inicializados")

        logger.success("‚úÖ CARID ALPR API con Streaming iniciada exitosamente")
        logger.info(f"üåê API disponible en: http://{settings.host}:{settings.port}")
        logger.info(f"üìö Documentaci√≥n disponible en: http://{settings.host}:{settings.port}/docs")
        logger.info(f"üìÇ Tama√±o m√°ximo de archivos: {settings.max_file_size}MB")
        logger.info(f"üé¨ Streaming habilitado: {'‚úÖ' if settings.streaming_enabled else '‚ùå'}")
        logger.info(f"üîå M√°x. conexiones WebSocket: {settings.max_websocket_connections}")

    except Exception as e:
        logger.error(f"‚ùå Error durante startup: {str(e)}")
        raise

    yield

    # Shutdown
    logger.info("üõë Cerrando CARID ALPR API...")

    try:
        # ‚úÖ LIMPIAR SERVICIOS DE STREAMING
        logger.info("üßπ Limpiando servicios de streaming...")

        # Limpiar connection manager
        from api.websocket_manager import connection_manager
        connection_manager.cleanup()

        # Limpiar streaming service
        from services.streaming_service import streaming_service
        streaming_service.cleanup()

        logger.info("‚úÖ Servicios de streaming limpiados")

        # Limpiar archivos temporales en shutdown
        from services.file_service import file_service
        file_service.cleanup_old_files(0)
        logger.info("üóëÔ∏è Archivos temporales limpiados")

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Error durante limpieza: {str(e)}")

    logger.info("‚úÖ API cerrada exitosamente")


# Crear aplicaci√≥n FastAPI
app = FastAPI(
    title="CARID - Sistema ALPR con Streaming",
    description="""
    ## üöó CARID - Sistema de Reconocimiento Autom√°tico de Placas Vehiculares

    Sistema avanzado de detecci√≥n y reconocimiento de placas vehiculares usando YOLOv8 con **streaming en tiempo real**.

    ### üéØ Caracter√≠sticas Principales:
    - **Detecci√≥n precisa** de placas vehiculares con YOLOv8
    - **Reconocimiento de caracteres** con alta precisi√≥n
    - **üÜï Streaming en tiempo real** con WebSocket
    - **üÜï Monitoreo en vivo** del procesamiento de video
    - **üÜï Control interactivo** (pause/resume/stop)
    - **Procesamiento de videos** con tracking inteligente avanzado
    - **Validaci√≥n de formato** para placas peruanas
    - **Procesamiento optimizado** con GPU CUDA
    - **API REST completa** y documentada
    - **‚úÖ Soporte para archivos hasta 150MB**

    ### üîß Tecnolog√≠as:
    - **YOLOv8** para detecci√≥n y reconocimiento
    - **PyTorch** con soporte CUDA 11.8
    - **FastAPI + WebSocket** para streaming en tiempo real
    - **OpenCV** para procesamiento de im√°genes y videos

    ### üìã Endpoints Principales:

    **üîç Detecci√≥n Est√°tica:**
    - `POST /api/v1/detect/image` - Detecci√≥n completa en im√°genes
    - `POST /api/v1/detect/image/quick` - Detecci√≥n r√°pida en im√°genes
    - `POST /api/v1/video/detect` - Detecci√≥n en videos (sin streaming)

    **üé¨ Streaming en Tiempo Real:**
    - `WS /api/v1/streaming/ws/{session_id}` - **NUEVO:** WebSocket para streaming
    - `POST /api/v1/streaming/start-session` - **NUEVO:** Iniciar sesi√≥n de streaming
    - `GET /api/v1/streaming/sessions` - **NUEVO:** Listar sesiones activas
    - `POST /api/v1/streaming/sessions/{session_id}/control` - **NUEVO:** Control de sesi√≥n

    **üè• Monitoreo:**
    - `GET /api/v1/health` - Health checks b√°sicos
    - `GET /api/v1/streaming/health` - **NUEVO:** Health check de streaming
    - `GET /api/v1/streaming/stats` - **NUEVO:** Estad√≠sticas de streaming
    - `GET /docs` - Esta documentaci√≥n

    ### üöÄ Etapa Actual: 4 - Streaming en Tiempo Real
    ‚úÖ Detecci√≥n y reconocimiento en im√°genes  
    ‚úÖ Validaci√≥n de formatos peruanos  
    ‚úÖ Procesamiento de videos frame por frame  
    ‚úÖ Tracking inteligente con doble confianza  
    ‚úÖ Sistema anti-duplicaci√≥n avanzado  
    ‚úÖ **NUEVO:** Streaming en tiempo real con WebSocket  
    ‚úÖ **NUEVO:** Monitoreo en vivo del procesamiento  
    ‚úÖ **NUEVO:** Control interactivo de sesiones  
    ‚úÖ **NUEVO:** Calidad adaptativa autom√°tica  
    ‚úÖ **NUEVO:** Timeline de detecciones en tiempo real

    ### üåê Funcionalidades de Streaming:
    - **WebSocket Full-Duplex**: Comunicaci√≥n bidireccional en tiempo real
    - **Calidad Adaptativa**: Ajusta autom√°ticamente seg√∫n ancho de banda
    - **Control Interactivo**: Pause/Resume/Stop durante procesamiento
    - **Timeline en Tiempo Real**: Ve las detecciones conforme aparecen
    - **M√∫ltiples Sesiones**: Hasta 20 sesiones simult√°neas
    - **Frames Anotados**: Ve el video con bounding boxes en tiempo real
    - **Estad√≠sticas en Vivo**: Progreso, velocidad, detecciones actualizadas
    - **Thumbnails**: Previsualizaci√≥n r√°pida de frames
    - **Exportaci√≥n**: Descarga resultados en JSON/CSV

    ### üìä Experiencia de Usuario:
    **Lo que ve el usuario en tiempo real:**
    - üé¨ **Video reproduci√©ndose** con bounding boxes din√°micos
    - üìã **Lista actualizada** de placas detectadas con timestamp
    - üìä **Progreso en tiempo real** con velocidad de procesamiento
    - üéØ **Informaci√≥n detallada** de confianza y validez
    - üéÆ **Controles interactivos** para pausar/reanudar
    - üìà **M√©tricas en vivo** de calidad y rendimiento
    """,
    version=settings.app_version,
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# üîß CONFIGURAR MIDDLEWARES PARA ARCHIVOS GRANDES Y STREAMING

# 1. Middleware para streaming (primero para optimizar)
# app.add_middleware(StreamingMiddleware)  # Temporalmente deshabilitado

# 2. Middleware personalizado para archivos grandes
# app.add_middleware(LargeFileMiddleware)  # Temporalmente deshabilitado

# 3. CORS con configuraci√≥n extendida para WebSocket
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En producci√≥n, especificar dominios exactos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    max_age=3600,  # Cache preflight por 1 hora
)

# Montar archivos est√°ticos
try:
    app.mount("/static", StaticFiles(directory=settings.static_dir), name="static")
    logger.info(f"üìÅ Archivos est√°ticos montados en: /static -> {settings.static_dir}")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è No se pudieron montar archivos est√°ticos: {str(e)}")

# ‚úÖ INCLUIR RUTAS (ORDEN IMPORTANTE)
app.include_router(health.router)
app.include_router(detection.router)
app.include_router(video_router)
app.include_router(streaming_router)  # ‚úÖ NUEVO: Rutas de streaming

logger.info("üõ£Ô∏è Rutas registradas:")
logger.info("   üìä Health: /api/v1/health/*")
logger.info("   üîç Detection: /api/v1/detect/*")
logger.info("   üé¨ Video: /api/v1/video/*")
logger.info("   üåê Streaming: /api/v1/streaming/* (NUEVO)")


# Endpoint ra√≠z actualizado con informaci√≥n de streaming
@app.get("/", tags=["Root"])
async def root():
    """Endpoint ra√≠z de la API con informaci√≥n completa incluyendo streaming"""

    # Obtener estado de los modelos
    try:
        models_status = model_manager.get_model_info() if model_manager.is_loaded else {"models_loaded": False}
    except:
        models_status = {"models_loaded": False}

    # Obtener estado del streaming
    try:
        from api.websocket_manager import connection_manager
        streaming_info = connection_manager.get_active_sessions_info()
    except:
        streaming_info = {"total_sessions": 0, "active_connections": 0}

    return {
        "message": "üöó CARID - Sistema ALPR con Streaming en Tiempo Real",
        "version": settings.app_version,
        "status": "running",
        "etapa_actual": "4 - Streaming en Tiempo Real Completo",

        "funcionalidades": {
            "deteccion_placas_imagenes": "‚úÖ Disponible",
            "reconocimiento_caracteres": "‚úÖ Disponible",
            "validacion_formato": "‚úÖ Disponible",
            "procesamiento_videos": "‚úÖ Disponible",
            "tracking_avanzado": "‚úÖ Doble confianza + estabilidad",
            "anti_duplicacion": "‚úÖ Sistema inteligente",
            "archivos_grandes": "‚úÖ Hasta 150MB",
            "streaming_tiempo_real": "‚úÖ **NUEVO** WebSocket + Monitoreo en vivo",
            "control_interactivo": "‚úÖ **NUEVO** Pause/Resume/Stop en tiempo real",
            "calidad_adaptativa": "‚úÖ **NUEVO** Optimizaci√≥n autom√°tica",
            "sesiones_multiples": "‚úÖ **NUEVO** Hasta 20 sesiones simult√°neas"
        },

        "modelos": {
            "cargados": models_status.get("models_loaded", False),
            "dispositivo": models_status.get("device", "unknown"),
            "detector_placas": models_status.get("plate_detector_loaded", False),
            "reconocedor_caracteres": models_status.get("char_recognizer_loaded", False)
        },

        "streaming": {
            "habilitado": settings.streaming_enabled,
            "sesiones_activas": streaming_info.get("total_sessions", 0),
            "conexiones_activas": streaming_info.get("active_connections", 0),
            "max_sesiones": settings.max_websocket_connections,
            "calidad_adaptativa": settings.streaming_adaptive_quality,
            "websocket_endpoint": "/api/v1/streaming/ws/{session_id}"
        },

        "endpoints": {
            # Endpoints existentes
            "deteccion_imagen": "/api/v1/detect/image",
            "deteccion_rapida": "/api/v1/detect/image/quick",
            "deteccion_video": "/api/v1/video/detect",
            "deteccion_video_rapida": "/api/v1/video/detect/quick",

            # NUEVOS endpoints de streaming
            "websocket_streaming": "/api/v1/streaming/ws/{session_id}",
            "iniciar_streaming": "/api/v1/streaming/start-session",
            "control_streaming": "/api/v1/streaming/sessions/{session_id}/control",
            "sesiones_streaming": "/api/v1/streaming/sessions",
            "estadisticas_streaming": "/api/v1/streaming/stats",
            "health_streaming": "/api/v1/streaming/health",

            # Health y docs
            "health_check": "/api/v1/health",
            "documentacion": "/docs",
            "estadisticas": "/api/v1/detect/stats"
        },

        "configuracion": {
            "max_file_size_mb": settings.max_file_size,
            "formatos_imagenes": ["jpg", "jpeg", "png"],
            "formatos_videos": ["mp4", "avi", "mov", "mkv", "webm"],
            "max_video_duration": settings.max_video_duration,
            "cuda_disponible": models_status.get("cuda_available", False),
            "streaming_frame_quality": settings.streaming_frame_quality,
            "streaming_max_size": settings.streaming_frame_max_size
        },

        "novedades_streaming": {
            "websocket_bidireccional": "Comunicaci√≥n en tiempo real full-duplex",
            "monitoreo_en_vivo": "Ve el procesamiento frame por frame",
            "control_interactivo": "Pausa/reanuda/detiene durante procesamiento",
            "calidad_adaptativa": "Ajuste autom√°tico seg√∫n ancho de banda",
            "timeline_detecciones": "Timeline en tiempo real de placas detectadas",
            "sesiones_multiples": "Hasta 20 usuarios simult√°neos",
            "frames_anotados": "Video con bounding boxes en tiempo real",
            "thumbnails": "Previsualizaci√≥n r√°pida optimizada",
            "exportacion_avanzada": "Descarga resultados en JSON/CSV",
            "metricas_tiempo_real": "Estad√≠sticas de rendimiento en vivo"
        },

        "arquitectura_streaming": {
            "frontend_conecta": "WebSocket a /api/v1/streaming/ws/{session_id}",
            "backend_procesa": "Frame por frame con YOLOv8",
            "envio_tiempo_real": "Frames + detecciones v√≠a WebSocket",
            "frontend_muestra": "Video con overlays + lista actualizada",
            "control_bidireccional": "Frontend puede pausar/reanudar backend",
            "calidad_dinamica": "Ajuste autom√°tico seg√∫n velocidad conexi√≥n"
        },

        "flujo_usuario": {
            "paso_1": "Frontend conecta WebSocket",
            "paso_2": "Usuario sube video v√≠a REST API",
            "paso_3": "Backend inicia procesamiento frame por frame",
            "paso_4": "Env√≠o continuo: frame + detecciones + progreso",
            "paso_5": "Frontend muestra video en vivo con bounding boxes",
            "paso_6": "Lista de placas se actualiza en tiempo real",
            "paso_7": "Usuario puede pausar/reanudar a voluntad",
            "paso_8": "Descarga resultados al finalizar"
        }
    }


# Endpoint de informaci√≥n del sistema actualizado
@app.get("/system", tags=["System"])
async def system_info():
    """Informaci√≥n detallada del sistema incluyendo streaming"""
    try:
        from api.dependencies import get_system_info
        system_info = get_system_info()

        # Agregar informaci√≥n espec√≠fica de streaming
        try:
            from api.websocket_manager import connection_manager
            from services.streaming_service import streaming_service

            streaming_system_info = {
                "websocket_manager": {
                    "active_sessions": len(connection_manager.sessions),
                    "max_sessions": settings.max_websocket_connections,
                    "security_enabled": True
                },
                "streaming_service": {
                    "active_processors": len(streaming_service.quality_managers),
                    "detection_trackers": len(streaming_service.detection_trackers),
                    "thread_pool_workers": streaming_service.executor._max_workers
                },
                "streaming_config": settings.get_streaming_config()
            }

            system_info["streaming"] = streaming_system_info

        except Exception as e:
            system_info["streaming_error"] = str(e)

        return system_info
    except Exception as e:
        logger.error(f"‚ùå Error obteniendo info del sistema: {str(e)}")
        return {"error": "No se pudo obtener informaci√≥n del sistema"}


# Endpoint espec√≠fico para estado de streaming
@app.get("/streaming-status", tags=["Streaming"])
async def streaming_status():
    """Estado r√°pido del sistema de streaming"""
    try:
        from api.websocket_manager import connection_manager
        from services.streaming_service import streaming_service

        sessions_info = connection_manager.get_active_sessions_info()

        return {
            "streaming_enabled": settings.streaming_enabled,
            "active_sessions": sessions_info["total_sessions"],
            "active_connections": sessions_info["active_connections"],
            "max_sessions": settings.max_websocket_connections,
            "capacity_usage_percent": (sessions_info["total_sessions"] / settings.max_websocket_connections) * 100,
            "quality_managers": len(streaming_service.quality_managers),
            "detection_trackers": len(streaming_service.detection_trackers),
            "websocket_endpoint": "/api/v1/streaming/ws/{session_id}",
            "documentation": "/docs#/üé¨%20Real-time%20Video%20Streaming",
            "timestamp": __import__('time').time()
        }
    except Exception as e:
        return {
            "streaming_enabled": False,
            "error": str(e),
            "timestamp": __import__('time').time()
        }


# Manejadores de errores mejorados
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    logger.error(f"‚ùå Error global en {request.url}: {str(exc)}")

    # Informaci√≥n adicional en modo debug
    error_detail = str(exc) if settings.debug else "Error interno del servidor"

    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "error": {
                "type": "InternalServerError",
                "message": "Error interno del servidor",
                "detail": error_detail
            },
            "endpoint": str(request.url.path),
            "method": request.method,
            "timestamp": str(__import__('datetime').datetime.utcnow().isoformat()),
            "help": "Contacte al administrador si el problema persiste",
            "streaming_status": "check /streaming-status for streaming health"
        }
    )


@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc: HTTPException):
    logger.warning(f"‚ö†Ô∏è Error HTTP {exc.status_code} en {request.url}: {exc.detail}")

    return JSONResponse(
        status_code=exc.status_code,
        content={
            "success": False,
            "error": {
                "type": "HTTPException",
                "message": exc.detail,
                "status_code": exc.status_code
            },
            "endpoint": str(request.url.path),
            "method": request.method,
            "timestamp": str(__import__('datetime').datetime.utcnow().isoformat())
        }
    )


if __name__ == "__main__":
    # Mensaje de inicio actualizado con streaming
    logger.info("üöó CARID ALPR - Etapa 4: Streaming en Tiempo Real")
    logger.info("=" * 80)
    logger.info("üéØ Funcionalidades disponibles:")
    logger.info("   ‚úÖ Detecci√≥n de placas en im√°genes")
    logger.info("   ‚úÖ Reconocimiento de caracteres")
    logger.info("   ‚úÖ Validaci√≥n de formatos peruanos")
    logger.info("   ‚úÖ Procesamiento de videos con tracking avanzado")
    logger.info("   ‚úÖ üÜï Streaming en tiempo real con WebSocket")
    logger.info("   ‚úÖ üÜï Monitoreo en vivo del procesamiento")
    logger.info("   ‚úÖ üÜï Control interactivo (pause/resume/stop)")
    logger.info("   ‚úÖ üÜï Calidad adaptativa autom√°tica")
    logger.info("   ‚úÖ üÜï Timeline de detecciones en tiempo real")
    logger.info("   ‚úÖ üÜï Sesiones m√∫ltiples (hasta 20)")
    logger.info("   ‚úÖ API REST completa")
    logger.info("   ‚úÖ Documentaci√≥n interactiva")
    logger.info("=" * 80)
    logger.info("üé¨ Capacidades de streaming:")
    logger.info("   üìπ Procesamiento en tiempo real de MP4, AVI, MOV, MKV, WebM")
    logger.info("   ‚è±Ô∏è Duraci√≥n m√°xima: 10 minutos, hasta 150MB")
    logger.info("   üéØ Doble confianza: Detector + Reconocedor")
    logger.info("   üîÑ Tracking estable con validaciones m√∫ltiples")
    logger.info("   üåê WebSocket full-duplex para comunicaci√≥n bidireccional")
    logger.info("   üìä Monitoreo de progreso, velocidad y detecciones en vivo")
    logger.info("   üéÆ Control total: pause/resume/stop durante procesamiento")
    logger.info("   üé® Frames anotados con bounding boxes en tiempo real")
    logger.info("   üìà Calidad adaptativa seg√∫n ancho de banda")
    logger.info("   üöÄ Procesamiento optimizado y paralelo")
    logger.info("=" * 80)
    logger.info("üåê Arquitectura de Streaming:")
    logger.info("   1Ô∏è‚É£ Frontend conecta WebSocket: /api/v1/streaming/ws/{session_id}")
    logger.info("   2Ô∏è‚É£ Backend procesa video frame por frame con YOLOv8")
    logger.info("   3Ô∏è‚É£ Env√≠o continuo: frames + detecciones + progreso")
    logger.info("   4Ô∏è‚É£ Frontend muestra video con overlays en tiempo real")
    logger.info("   5Ô∏è‚É£ Lista de placas se actualiza autom√°ticamente")
    logger.info("   6Ô∏è‚É£ Control bidireccional para pausar/reanudar")
    logger.info("=" * 80)

    # Ejecutar servidor con configuraci√≥n optimizada para streaming
    logger.info("üöÄ Iniciando servidor con soporte completo de streaming...")

    uvicorn.run(
        "main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug,
        log_level=settings.log_level.lower(),
        access_log=True,
        timeout_keep_alive=60,
        limit_max_requests=2000,
        backlog=4096,
        ws="auto",
    )
